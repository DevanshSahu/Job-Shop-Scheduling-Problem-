// Finds minimum time using Branch and Bound.  

int findMinTime(int timeMatrix[N][N])  

{  

    // Create a priority queue to store live nodes of  

    // search tree;  

    priority_queue<Node*, std::vector<Node*>, comp> pq;  

   

    // initailize heap to dummy node with time 0  

    bool assigned[N] = {false};  

    Node* root = newNode(-1, -1, assigned, NULL);  

    root->pathTime = root->time = 0;  

    root->machineID = -1;  

   

    // Add dummy node to list of live nodes;  

    pq.push(root);  

   

    // Finds a live node with least time,  

    // add its childrens to list of live nodes and  

    // finally deletes it from the list.  

    while (!pq.empty())  

    {  

      // Find a live node with least estimated time 

      Node* min = pq.top();  

   

      // The found node is deleted from the list of  

      // live nodes  

      pq.pop();  

   

      // i stores next machine  

      int i = min->machineID + 1;  

   

      // if all machines are assigned a job  

      if (i == N)  

      {  

          printAssignments(min);  

          return min->time;  

      }  

   

      // do for each job  

      for (int j = 0; j < N; j++)  

      {  

        // If unassigned  

        if (!min->assigned[j])  

        {  

          // create a new tree node  

          Node* child = newNode(i, j, min->assigned, min);  

   

          // time for ancestors nodes including current node  

          child->pathTime = min->pathTime + timeMatrix[i][j];  

   

          // calculate its lower bound  

          child->time = child->pathTime +  

            calculateTime(timeMatrix, i, j, child->assigned);  

   

          // Add child to list of live nodes;  

          pq.push(child);  

        }  

      }  

    }  

}  